pluginManagement {
  repositories {
    gradlePluginPortal()
    google()
    mavenCentral()
  }
  resolutionStrategy {
    eachPlugin { requested ->
      if (requested.id.id == 'expo-module-gradle-plugin') {
        useModule('expo:expo-modules-gradle-plugin:0.12.1')
      }
    }
  }
  def version = providers.exec {
    workingDir(rootDir)
    commandLine("node", "-e", "console.log(require('react-native/package.json').version);")
  }.standardOutput.asText.get().trim()
  def (_, reactNativeMinor, reactNativePatch) = version.split("-")[0].tokenize('.').collect { it.toInteger() }

  // Resolve RN Gradle plugin path robustly
  def rnGradlePluginPath = providers.exec {
    workingDir(rootDir)
    commandLine("node", "-e", "console.log(require.resolve('@react-native/gradle-plugin/package.json'))")
  }.standardOutput.asText.get().trim()
  includeBuild(new File(rnGradlePluginPath).getParentFile().toString())

  if(reactNativeMinor == 74 && reactNativePatch <= 3){
    includeBuild("react-settings-plugin")
  }
}

plugins { id("com.facebook.react.settings") }

def getRNMinorVersion() {
  def version = providers.exec {
    workingDir(rootDir)
    commandLine("node", "-e", "console.log(require('react-native/package.json').version);")
  }.standardOutput.asText.get().trim()

  def coreVersion = version.split("-")[0]
  def (major, minor, patch) = coreVersion.tokenize('.').collect { it.toInteger() }

  return minor
}

if (getRNMinorVersion() >= 75) {
  extensions.configure(com.facebook.react.ReactSettingsExtension) { ex ->
    if (System.getenv('EXPO_UNSTABLE_CORE_AUTOLINKING') == '1') {
      println('\u001B[32mUsing expo-modules-autolinking as core autolinking source\u001B[0m')
      def command = [
        'node',
        '--no-warnings',
        '--eval',
        'require(require.resolve(\'expo-modules-autolinking\', { paths: [require.resolve(\'expo/package.json\')] }))(process.argv.slice(1))',
        'react-native-config',
        '--json',
        '--platform',
        'android'
      ].toList()
      ex.autolinkLibrariesFromCommand(command)
    } else {
      ex.autolinkLibrariesFromCommand()
    }
  }
}

rootProject.name = 'Voluntapp'

dependencyResolutionManagement {
  versionCatalogs {
    reactAndroidLibs {
      def rnPkgPath = providers.exec {
        workingDir(rootDir)
        commandLine("node", "-e", "console.log(require.resolve('react-native/package.json'))")
      }.standardOutput.asText.get().trim()
      from(files(new File(rnPkgPath, "../gradle/libs.versions.toml")))
    }
  }
}

def expoPkgPath = providers.exec {
  workingDir(rootDir)
  commandLine("node", "-e", "console.log(require.resolve('expo/package.json'))")
}.standardOutput.asText.get().trim()
apply from: new File(expoPkgPath, "../scripts/autolinking.gradle");
useExpoModules()

if (getRNMinorVersion() < 75) {
  def rnCliAndroidPkgPath = providers.exec {
    workingDir(rootDir)
    commandLine("node", "-e", "console.log(require.resolve('@react-native-community/cli-platform-android/package.json', { paths: [require.resolve('react-native/package.json')] }))")
  }.standardOutput.asText.get().trim()
  apply from: new File(rnCliAndroidPkgPath, "../native_modules.gradle");
  applyNativeModulesSettingsGradle(settings)
}

include ':app'
def rnGradlePluginPath2 = providers.exec {
  workingDir(rootDir)
  commandLine("node", "-e", "console.log(require.resolve('@react-native/gradle-plugin/package.json', { paths: [require.resolve('react-native/package.json')] }))")
}.standardOutput.asText.get().trim()
includeBuild(new File(rnGradlePluginPath2).getParentFile())
