Design a frontend for a mobile application that has an androidOS and iOS version. The app's name is Voluntapp and it is an app that uses an algorithm to give its users volunteer opportunites that are personalized based on their location and previous volunteer opportunites that they completed. Other types of users can input volunteer opportunities at a specific location. When the app first opens, the user has to create an account. The account information includes email (optional but required if no phone), password (encrypted probably through a hash), name, phone (optional but required if no email), role  (volunteer or giver), email verified (true or false), phone verified (true or false), time of account creation,  time of account update. These values and id are what is stored in the my-sql database backend (already created). After the user creates the account, they are asked their location which is also stored in the database. After creating their account (where they specify whether to provide volunteer opportunities or need them), the user is directed to the home page. This is the page that the user will automatically go to every time they open after creating their account and signing in to it. On this page, there are a few things that the user can do. On the top left is a map (use google maps or whatever is free to use). This map when minimized shows the user volunteer opportunities near them. The user can click on the map which makes it take up the whole screen and shows something like a normal map with each volunteer opportunity near the user listed on it. On this map page the user can click on each volunteer opportunity to know more details about it. These include the name of the opportunity, provider of the opportunities name, a description for the opportunity, the location, the start and end time/dates, tags. The user can select a button that makes them “apply” for the opportunity and cancel their application if they are already applied. Back on the Home page, the rest of the page below the map shows recommended volunteer opportunities for and near the user. Clicking on these will boot up the page as clicking on the images on the map would and the user can do the same thing with applying to volunteer and canceling it. There should also be a section like tab on the bottom of the screen (bottombar) and the other section on the tab will contain data/stats on all of the previous volunteer activities that the user has done. This is something that can be used for things like college applications or for volunteer hours. The provider of the opportunity can electronically sign in the app and it will save on the user's end as a successful volunteer for as many hours as it took. The app will also use apple or google calendar invites based on the email/phone number. For the provider of the opportunities end, the UI should show a button to add an opportunity and a list of existing opportunities that they have created that are coming, showing the most recent ones first. This should look similar to the volunteers frontend except without a map. It should also have a data tab, where all of the previously hosted volunteer opportunities that the provider created are shown. Ensure that the UI has a very modern look to it, utilizing an orange color theme but make sure to do what will look the best for the app and to keep it consistent across the app. For ios devices, make sure to implement liquid glass and other modern design features that ios provides. For androidOS devices, make sure to include modern design features the android development provides. After this make sure to implement a backend that is separate from the frontend. This backend will include the database, the logic, and everything else that is needed to keep the app running. Also, I will be hosting the backend on a local PC and use tools like ngrok to make it accessible. So make sure that the database code is in a separate file so that I can just import it into the backend. The backend and database will be hosted in an ubuntu linux distribution with my-sql being used for the database.